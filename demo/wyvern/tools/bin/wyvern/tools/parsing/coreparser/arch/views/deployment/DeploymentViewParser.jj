/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DeploymentViewParser.jj */
/*@egen*/options
{
                           
	             
	               
    STATIC = false;
    USER_TOKEN_MANAGER = true;
}

PARSER_BEGIN(DeploymentViewParser)

package wyvern.tools.parsing.coreparser.arch.views.deployment;

import wyvern.tools.parsing.coreparser.TokenManager;
import wyvern.tools.parsing.coreparser.Token;
import wyvern.tools.parsing.coreparser.ParseException;

public class DeploymentViewParser/*@bgen(jjtree)*/implements DeploymentViewParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTDeploymentViewParserState jjtree = new JJTDeploymentViewParserState();

/*@egen*/

}

PARSER_END(DeploymentViewParser)

TOKEN : /* Keywords */
{
  <DEPLOYMENT: "deployment">
| <EXTENDS: "extends">
}

SPECIAL_TOKEN : /* Comments and whitespace */
{
  <SINGLE_LINE_COMMENT>
| <MULTI_LINE_COMMENT>
| <WHITESPACE>
}

TOKEN : /* Logical Formatting */
{
  <DEDENT>
| <INDENT>
| <NEWLINE>
}

TOKEN : /* Identifiers */
{
  <IDENTIFIER>
}

TOKEN : /* Symbols */
{
  <DOT>
| <EQUALS>
}

TOKEN: /* Literals */
{
  <STRING_LITERAL>
| <BOOLEAN_LITERAL>
}

SimpleNode DeploymentDecl() :
{/*@bgen(jjtree) DeploymentDecl */
    ASTDeploymentDecl jjtn000 = new ASTDeploymentDecl(JJTDEPLOYMENTDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
    Token archName;
}
{/*@bgen(jjtree) DeploymentDecl */
    try {
/*@egen*/
    <DEPLOYMENT> name=<IDENTIFIER> <EXTENDS> archName=<IDENTIFIER>
    <NEWLINE> <INDENT> Setters() <DEDENT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(name.image);
        jjtn000.setArchName(archName.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Setters()      :
{ }
{
    Setter() (Setter())*
}

void Setter() :
{/*@bgen(jjtree) Setter */
  ASTSetter jjtn000 = new ASTSetter(JJTSETTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String lhs; Object rhs; }
{/*@bgen(jjtree) Setter */
    try {
/*@egen*/
    lhs=Lhs() <EQUALS> rhs=Rhs() <NEWLINE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setLhs(lhs);
        jjtn000.setRhs(rhs);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Lhs()      :
{ String identifier, lhsRemaining; }
{
    identifier=Identifier() <DOT> lhsRemaining=LhsRemaining()
    { return identifier + "." + lhsRemaining; }
}

String Identifier()      :
{ Token t; }
{
    t=<IDENTIFIER>
    { return t.image; }
}

String LhsRemaining()      :
{ String identifier, lhsRemaining; }
{
    LOOKAHEAD(2)
    identifier=Identifier() <DOT> lhsRemaining=LhsRemaining()
    { return identifier + "." + lhsRemaining; }
|
    identifier=Identifier()
    { return identifier; }
}

Object Rhs()      :
{ Token t; }
{
    t=<STRING_LITERAL> { return t.image; }
|
    t=<BOOLEAN_LITERAL> { return Boolean.parseBoolean(t.image); }
}